{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\n\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst inputDate = document.querySelector(\"#datetime-picker\");\nconst buttonStart = document.querySelector(\"[data-start]\");\nconst dateDay = document.querySelector(\"[data-days]\");\nconst dateHour = document.querySelector(\"[data-hours]\");\nconst dateMinutes = document.querySelector(\"[data-minutes]\");\nconst dateSeconds = document.querySelector(\"[data-seconds]\");\n\nbuttonStart.disabled = true;\nlet time = null;\nlet intervalId = null;\nlet userDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n      if (selectedDates[0].getTime() < Date.now()) {\n          iziToast.warning({ message: 'Please choose a date in the future' });\n      } else { \n        userDate = selectedDates[0].getTime();\n          buttonStart.disabled = false;\n          inputDate.disabled = true;\n      }\n  },\n};\n// formula done seconds, minutes, hours\nconst formatTime = milliseconds => {\n    const seconds = Math.floor((milliseconds / 1000) % 60);\n    const minutes = Math.floor((milliseconds / 1000 / 60) % 60);\n    const hours = Math.floor((milliseconds / 1000 / 60 / 60) % 24);\n    const days = Math.floor(((milliseconds / 1000 / 60 / 60) % 24) % 7);\n\n    return [\n        days.toString().padStart(2, \"0\"),\n        hours.toString().padStart(2, \"0\"),\n        minutes.toString().padStart(2, \"0\"),\n        seconds.toString().padStart(2, \"0\")\n    ];\n}\n\nconst fp = flatpickr(inputDate, options);\n\nbuttonStart.addEventListener(\"click\", () => {\n    buttonStart.disabled = true;\nintervalId = setInterval(() => {\n    const currentDate = Date.now();\n    const dateTimer = userDate - currentDate; \n    time = formatTime(dateTimer);\n    dateDay.textContent = time[0];\n    dateHour.textContent = time[1];\n    dateMinutes.textContent = time[2];\n    dateSeconds.textContent = time[3];\n        if (dateTimer < 1000) {\n            clearInterval(intervalId);\n            buttonStart.disabled = true;\n            return;\n        }\n    }, 1000);\n});\n\n\n\n\n\n"],"names":["inputDate","buttonStart","dateDay","dateHour","dateMinutes","dateSeconds","time","intervalId","userDate","options","selectedDates","iziToast","formatTime","milliseconds","seconds","minutes","hours","flatpickr","currentDate","dateTimer"],"mappings":"0IAOA,MAAMA,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAU,SAAS,cAAc,aAAa,EAC9CC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3DJ,EAAY,SAAW,GACvB,IAAIK,EAAO,KACPC,EAAa,KACbC,EAAW,KAEf,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACfA,EAAc,CAAC,EAAE,QAAO,EAAK,KAAK,MAClCC,EAAS,QAAQ,CAAE,QAAS,oCAAsC,CAAA,GAEpEH,EAAWE,EAAc,CAAC,EAAE,QAAO,EACjCT,EAAY,SAAW,GACvBD,EAAU,SAAW,GAE5B,CACH,EAEMY,EAAaC,GAAgB,CAC/B,MAAMC,EAAU,KAAK,MAAOD,EAAe,IAAQ,EAAE,EAC/CE,EAAU,KAAK,MAAOF,EAAe,IAAO,GAAM,EAAE,EACpDG,EAAQ,KAAK,MAAOH,EAAe,IAAO,GAAK,GAAM,EAAE,EAG7D,MAAO,CAFM,KAAK,MAAQA,EAAe,IAAO,GAAK,GAAM,GAAM,CAAC,EAGzD,SAAU,EAAC,SAAS,EAAG,GAAG,EAC/BG,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,EAChCD,EAAQ,SAAU,EAAC,SAAS,EAAG,GAAG,EAClCD,EAAQ,SAAU,EAAC,SAAS,EAAG,GAAG,CAC1C,CACA,EAEWG,EAAUjB,EAAWS,CAAO,EAEvCR,EAAY,iBAAiB,QAAS,IAAM,CACxCA,EAAY,SAAW,GAC3BM,EAAa,YAAY,IAAM,CAC3B,MAAMW,EAAc,KAAK,MACnBC,EAAYX,EAAWU,EAMzB,GALJZ,EAAOM,EAAWO,CAAS,EAC3BjB,EAAQ,YAAcI,EAAK,CAAC,EAC5BH,EAAS,YAAcG,EAAK,CAAC,EAC7BF,EAAY,YAAcE,EAAK,CAAC,EAChCD,EAAY,YAAcC,EAAK,CAAC,EACxBa,EAAY,IAAM,CAClB,cAAcZ,CAAU,EACxBN,EAAY,SAAW,GACvB,MACH,CACJ,EAAE,GAAI,CACX,CAAC"}