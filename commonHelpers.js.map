{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\n\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst inputDate = document.querySelector(\"#datetime-picker\");\nconst buttonStart = document.querySelector(\"[data-start]\");\nconst dateDay = document.querySelector(\"[data-days]\");\nconst dateHour = document.querySelector(\"[data-hours]\");\nconst dateMinutes = document.querySelector(\"[data-minutes]\");\nconst dateSeconds = document.querySelector(\"[data-seconds]\");\n\nbuttonStart.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n      if (selectedDates[0].getTime() < Date.now()) {\n          iziToast.warning({ message: 'Please choose a date in the future'});\n    }\n  },\n};\n// formula done seconds, minutes, hours\nconst formatTime = milliseconds => {\n    const seconds = Math.floor((milliseconds / 1000) % 60);\n    const minutes = Math.floor((milliseconds / 1000 / 60) % 60);\n    const hours = Math.floor((milliseconds / 1000 / 60 / 60) % 24);\n    const days = Math.floor(((milliseconds / 1000 / 60 / 60) % 24) % 7);\n\n    return [\n        days.toString().padStart(2, \"0\"),\n        hours.toString().padStart(2, \"0\"),\n        minutes.toString().padStart(2, \"0\"),\n        seconds.toString().padStart(2, \"0\")\n    ];\n}\n\nconst fp = flatpickr(inputDate, options);\nlet time = null;\nlet intervalId = null;\n\n\ninputDate.addEventListener(\"input\", () => { \n\n    let dateNow = new Date(inputDate.value);\n    if (Date.now() < dateNow) {\n        buttonStart.disabled = false;\n        buttonStart.addEventListener(\"click\", () => { \n        intervalId = setInterval(() => {\n            const currentDate = Date.now();\n            \n            const dateTimer = dateNow - currentDate; \n            time = formatTime(dateTimer);\n            dateDay.textContent = time[0];\n            dateHour.textContent = time[1];\n            dateMinutes.textContent = time[2];\n            dateSeconds.textContent = time[3];\n                if (dateTimer < 1000) {\n                    clearInterval(intervalId);\n                    buttonStart.disabled = true;\n                }\n            }, 1000);\n        });\n    } \n});\n\n\n"],"names":["inputDate","buttonStart","dateDay","dateHour","dateMinutes","dateSeconds","options","selectedDates","iziToast","formatTime","milliseconds","seconds","minutes","hours","flatpickr","time","intervalId","dateNow","currentDate","dateTimer"],"mappings":"2GAOA,MAAMA,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAU,SAAS,cAAc,aAAa,EAC9CC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3DJ,EAAY,SAAW,GAEvB,MAAMK,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACfA,EAAc,CAAC,EAAE,QAAO,EAAK,KAAK,OAClCC,EAAS,QAAQ,CAAE,QAAS,oCAAoC,CAAC,CAExE,CACH,EAEMC,EAAaC,GAAgB,CAC/B,MAAMC,EAAU,KAAK,MAAOD,EAAe,IAAQ,EAAE,EAC/CE,EAAU,KAAK,MAAOF,EAAe,IAAO,GAAM,EAAE,EACpDG,EAAQ,KAAK,MAAOH,EAAe,IAAO,GAAK,GAAM,EAAE,EAG7D,MAAO,CAFM,KAAK,MAAQA,EAAe,IAAO,GAAK,GAAM,GAAM,CAAC,EAGzD,SAAU,EAAC,SAAS,EAAG,GAAG,EAC/BG,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,EAChCD,EAAQ,SAAU,EAAC,SAAS,EAAG,GAAG,EAClCD,EAAQ,SAAU,EAAC,SAAS,EAAG,GAAG,CAC1C,CACA,EAEWG,EAAUd,EAAWM,CAAO,EACvC,IAAIS,EAAO,KACPC,EAAa,KAGjBhB,EAAU,iBAAiB,QAAS,IAAM,CAEtC,IAAIiB,EAAU,IAAI,KAAKjB,EAAU,KAAK,EAClC,KAAK,IAAK,EAAGiB,IACbhB,EAAY,SAAW,GACvBA,EAAY,iBAAiB,QAAS,IAAM,CAC5Ce,EAAa,YAAY,IAAM,CAC3B,MAAME,EAAc,KAAK,MAEnBC,EAAYF,EAAUC,EAC5BH,EAAON,EAAWU,CAAS,EAC3BjB,EAAQ,YAAca,EAAK,CAAC,EAC5BZ,EAAS,YAAcY,EAAK,CAAC,EAC7BX,EAAY,YAAcW,EAAK,CAAC,EAChCV,EAAY,YAAcU,EAAK,CAAC,EACxBI,EAAY,MACZ,cAAcH,CAAU,EACxBf,EAAY,SAAW,GAE9B,EAAE,GAAI,CACnB,CAAS,EAET,CAAC"}